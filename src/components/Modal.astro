---
export interface Props {
  id: string;
  title?: string;
  type?: 'success' | 'error' | 'warning' | 'info';
}

const { id, title = 'Notification', type = 'info' } = Astro.props;

const typeStyles = {
  success: {
    icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',
    bgColor: 'bg-green-50 dark:bg-green-900/20',
    textColor: 'text-green-800 dark:text-green-200',
    borderColor: 'border-green-200 dark:border-green-800',
    iconColor: 'text-green-600 dark:text-green-400'
  },
  error: {
    icon: 'M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z',
    bgColor: 'bg-red-50 dark:bg-red-900/20',
    textColor: 'text-red-800 dark:text-red-200',
    borderColor: 'border-red-200 dark:border-red-800',
    iconColor: 'text-red-600 dark:text-red-400'
  },
  warning: {
    icon: 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z',
    bgColor: 'bg-yellow-50 dark:bg-yellow-900/20',
    textColor: 'text-yellow-800 dark:text-yellow-200',
    borderColor: 'border-yellow-200 dark:border-yellow-800',
    iconColor: 'text-yellow-600 dark:text-yellow-400'
  },
  info: {
    icon: 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z',
    bgColor: 'bg-blue-50 dark:bg-blue-900/20',
    textColor: 'text-blue-800 dark:text-blue-200',
    borderColor: 'border-blue-200 dark:border-blue-800',
    iconColor: 'text-blue-600 dark:text-blue-400'
  }
};

const styles = typeStyles[type];
---

<div id={id} class="modal hidden fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
  <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <!-- Background overlay -->
    <div class="modal-backdrop fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>

    <!-- Modal panel -->
    <div class="modal-content inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
      <div class={`${styles.bgColor} ${styles.borderColor} border-l-4 p-4`}>
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class={`h-5 w-5 ${styles.iconColor}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d={styles.icon} clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class={`text-sm font-medium ${styles.textColor}`} id="modal-title">
              {title}
            </h3>
            <div class="mt-2">
              <p class={`text-sm ${styles.textColor} modal-message`}>
                <!-- Message content will be inserted here via JavaScript -->
              </p>
            </div>
          </div>
        </div>
      </div>
      <div class="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button type="button" class="modal-close w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:ml-3 sm:w-auto sm:text-sm">
          OK
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .modal {
    backdrop-filter: blur(4px);
  }
  
  .modal-content {
    animation: modalSlideIn 0.3s ease-out;
  }
  
  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-10px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
</style>

<script>
  // Modal utility functions
  window.Modal = {
    show: function(id: string, message: string, title?: string, type: 'success' | 'error' | 'warning' | 'info' = 'info') {
      const modal = document.getElementById(id) as HTMLElement;
      if (!modal) {
        console.error(`Modal with id "${id}" not found`);
        return;
      }

      // Update modal content
      const messageElement = modal.querySelector('.modal-message');
      if (messageElement) {
        messageElement.textContent = message;
      }

      // Update title if provided
      if (title) {
        const titleElement = modal.querySelector('#modal-title');
        if (titleElement) {
          titleElement.textContent = title;
        }
      }

      // Update type styles
      const typeStyles = {
        success: {
          icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',
          bgColor: 'bg-green-50 dark:bg-green-900/20',
          textColor: 'text-green-800 dark:text-green-200',
          borderColor: 'border-green-200 dark:border-green-800',
          iconColor: 'text-green-600 dark:text-green-400'
        },
        error: {
          icon: 'M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z',
          bgColor: 'bg-red-50 dark:bg-red-900/20',
          textColor: 'text-red-800 dark:text-red-200',
          borderColor: 'border-red-200 dark:border-red-800',
          iconColor: 'text-red-600 dark:text-red-400'
        },
        warning: {
          icon: 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z',
          bgColor: 'bg-yellow-50 dark:bg-yellow-900/20',
          textColor: 'text-yellow-800 dark:text-yellow-200',
          borderColor: 'border-yellow-200 dark:border-yellow-800',
          iconColor: 'text-yellow-600 dark:text-yellow-400'
        },
        info: {
          icon: 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z',
          bgColor: 'bg-blue-50 dark:bg-blue-900/20',
          textColor: 'text-blue-800 dark:text-blue-200',
          borderColor: 'border-blue-200 dark:border-blue-800',
          iconColor: 'text-blue-600 dark:text-blue-400'
        }
      };

      const styles = typeStyles[type];
      const contentDiv = modal.querySelector('.modal-content > div:first-child');
      if (contentDiv) {
        // Remove existing type classes
        contentDiv.className = contentDiv.className.replace(/bg-(green|red|yellow|blue)-50/g, '');
        contentDiv.className = contentDiv.className.replace(/dark:bg-(green|red|yellow|blue)-900\/20/g, '');
        contentDiv.className = contentDiv.className.replace(/border-(green|red|yellow|blue)-200/g, '');
        contentDiv.className = contentDiv.className.replace(/dark:border-(green|red|yellow|blue)-800/g, '');
        
        // Add new type classes
        contentDiv.className += ` ${styles.bgColor} ${styles.borderColor}`;
      }

      const iconElement = modal.querySelector('svg');
      if (iconElement) {
        iconElement.className = `h-5 w-5 ${styles.iconColor}`;
        const pathElement = iconElement.querySelector('path');
        if (pathElement) {
          pathElement.setAttribute('d', styles.icon);
        }
      }

      // Show modal
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';

      // Focus the close button
      const closeButton = modal.querySelector('.modal-close') as HTMLButtonElement;
      if (closeButton) {
        closeButton.focus();
      }
    },

    hide: function(id: string) {
      const modal = document.getElementById(id) as HTMLElement;
      if (modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    }
  };

  // Add event listeners to all modals
  document.addEventListener('DOMContentLoaded', function() {
    const modals = document.querySelectorAll('.modal');
    
    modals.forEach(modal => {
      const closeButton = modal.querySelector('.modal-close');
      const backdrop = modal.querySelector('.modal-backdrop');
      
      // Close on button click
      closeButton?.addEventListener('click', () => {
        window.Modal.hide(modal.id);
      });
      
      // Close on backdrop click
      backdrop?.addEventListener('click', () => {
        window.Modal.hide(modal.id);
      });
      
      // Close on Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
          window.Modal.hide(modal.id);
        }
      });
    });
  });
</script> 