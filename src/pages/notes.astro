---
import Layout from '../layouts/Layout.astro';
import { marked } from 'marked';

// In a real app, you'd fetch this from your notes directory
const allNotes = [
  {
    title: "Binary Search Implementation",
    description: "Complete guide to binary search with examples in Python, JavaScript, and Java",
    tags: ["algorithms", "python", "javascript", "java", "search"],
    date: "2024-01-15",
    readTime: "5 min read",
    category: "algorithms",
    difficulty: "intermediate",
    slug: "binary-search"
  },
  {
    title: "System Design: URL Shortener",
    description: "Step-by-step design of a URL shortening service with scalability considerations",
    tags: ["system-design", "scalability", "architecture", "distributed-systems"],
    date: "2024-01-10",
    readTime: "12 min read",
    category: "system-design",
    difficulty: "advanced",
    slug: "url-shortener-design"
  },
  {
    title: "Git Workflow Best Practices",
    description: "Essential Git commands and workflows for team collaboration",
    tags: ["git", "workflow", "collaboration", "version-control"],
    date: "2024-01-08",
    readTime: "8 min read",
    category: "devops",
    difficulty: "beginner",
    slug: "git-workflow"
  },
  {
    title: "Python List Comprehensions Performance",
    description: "When list comprehensions are faster than traditional for loops",
    tags: ["python", "performance", "optimization"],
    date: "2024-01-05",
    readTime: "4 min read",
    category: "python",
    difficulty: "intermediate",
    slug: "python-list-comprehensions"
  },
  {
    title: "CSS Grid vs Flexbox: When to Use Each",
    description: "Understanding the differences and use cases for CSS Grid and Flexbox",
    tags: ["css", "frontend", "layout", "responsive-design"],
    date: "2024-01-03",
    readTime: "6 min read",
    category: "frontend",
    difficulty: "intermediate",
    slug: "css-grid-vs-flexbox"
  },
  {
    title: "Docker Container Best Practices",
    description: "Optimizing Docker containers for production deployment",
    tags: ["docker", "containers", "devops", "deployment"],
    date: "2023-12-28",
    readTime: "10 min read",
    category: "devops",
    difficulty: "intermediate",
    slug: "docker-best-practices"
  }
];

const categories = ["all", "algorithms", "system-design", "python", "devops", "frontend", "ai-ml", "trading"];
const difficulties = ["all", "beginner", "intermediate", "advanced"];

// Get URL parameters for filtering
const url = new URL(Astro.request.url);
const selectedCategory = url.searchParams.get('category') || 'all';
const selectedDifficulty = url.searchParams.get('difficulty') || 'all';
const searchQuery = url.searchParams.get('search') || '';

// Filter notes based on parameters
let filteredNotes = allNotes;

if (selectedCategory !== 'all') {
  filteredNotes = filteredNotes.filter(note => note.category === selectedCategory);
}

if (selectedDifficulty !== 'all') {
  filteredNotes = filteredNotes.filter(note => note.difficulty === selectedDifficulty);
}

if (searchQuery) {
  const query = searchQuery.toLowerCase();
  filteredNotes = filteredNotes.filter(note => 
    note.title.toLowerCase().includes(query) ||
    note.description.toLowerCase().includes(query) ||
    note.tags.some(tag => tag.toLowerCase().includes(query))
  );
}
---

<Layout title="All Notes - DevNotes">
  <div class="px-4 py-8 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
        All Notes
      </h1>
      <p class="text-gray-600 dark:text-gray-300">
        Explore {allNotes.length} technical notes across various topics and difficulty levels.
      </p>
    </div>

    <!-- Filters -->
    <div class="mb-8 space-y-4">
      <!-- Search -->
      <div class="relative max-w-md">
        <input 
          type="text" 
          placeholder="Search notes..." 
          class="search-input"
          id="search-input"
          value={searchQuery}
        >
        <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
          <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
      </div>

      <!-- Category and Difficulty Filters -->
      <div class="flex flex-wrap gap-4">
        <div>
          <label for="category-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Category
          </label>
          <select id="category-filter" class="search-input w-auto">
            {categories.map(category => (
              <option value={category} selected={category === selectedCategory}>
                {category === 'all' ? 'All Categories' : category.charAt(0).toUpperCase() + category.slice(1).replace('-', ' ')}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label for="difficulty-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Difficulty
          </label>
          <select id="difficulty-filter" class="search-input w-auto">
            {difficulties.map(difficulty => (
              <option value={difficulty} selected={difficulty === selectedDifficulty}>
                {difficulty === 'all' ? 'All Levels' : difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
              </option>
            ))}
          </select>
        </div>
      </div>
    </div>

    <!-- Results Count -->
    <div class="mb-6">
      <p class="text-gray-600 dark:text-gray-400">
        Showing {filteredNotes.length} of {allNotes.length} notes
      </p>
    </div>

    <!-- Notes Grid -->
    {filteredNotes.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredNotes.map(note => (
          <article class="card p-6 hover:shadow-lg transition-all duration-200 hover:scale-105">
            <div class="flex items-center justify-between mb-3">
              <span class="text-sm text-gray-500 dark:text-gray-400">{note.date}</span>
              <div class="flex items-center space-x-2">
                <span class="text-sm text-gray-500 dark:text-gray-400">{note.readTime}</span>
                <span class={`px-2 py-1 text-xs rounded-full ${
                  note.difficulty === 'beginner' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
                  note.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
                  'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                }`}>
                  {note.difficulty}
                </span>
              </div>
            </div>
            
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              <a href={`/notes/${note.slug}`} class="hover:text-primary-600 transition-colors">
                {note.title}
              </a>
            </h3>
            
            <p class="text-gray-600 dark:text-gray-300 mb-4 text-sm">
              {note.description}
            </p>
            
            <div class="flex flex-wrap gap-2 mb-4">
              {note.tags.slice(0, 3).map(tag => (
                <span class="tag">{tag}</span>
              ))}
              {note.tags.length > 3 && (
                <span class="text-xs text-gray-500 dark:text-gray-400">+{note.tags.length - 3} more</span>
              )}
            </div>
            
            <div class="flex items-center justify-between">
              <span class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide">
                {note.category}
              </span>
              <a href={`/notes/${note.slug}`} class="text-primary-600 hover:text-primary-700 text-sm font-medium">
                Read more ‚Üí
              </a>
            </div>
          </article>
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">üîç</div>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
          No notes found
        </h3>
        <p class="text-gray-600 dark:text-gray-400 mb-6">
          Try adjusting your search criteria or filters.
        </p>
        <button onclick="clearFilters()" class="btn-primary">
          Clear Filters
        </button>
      </div>
    )}
  </div>

  <script>
    // Filter functionality
    const searchInput = document.getElementById('search-input');
    const categoryFilter = document.getElementById('category-filter');
    const difficultyFilter = document.getElementById('difficulty-filter');

    function updateFilters() {
      const search = searchInput?.value || '';
      const category = categoryFilter?.value || 'all';
      const difficulty = difficultyFilter?.value || 'all';
      
      const params = new URLSearchParams();
      if (search) params.set('search', search);
      if (category !== 'all') params.set('category', category);
      if (difficulty !== 'all') params.set('difficulty', difficulty);
      
      const url = new URL(window.location);
      url.search = params.toString();
      window.location.href = url.toString();
    }

    searchInput?.addEventListener('input', debounce(updateFilters, 300));
    categoryFilter?.addEventListener('change', updateFilters);
    difficultyFilter?.addEventListener('change', updateFilters);

    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    function clearFilters() {
      window.location.href = '/notes';
    }
  </script>
</Layout> 