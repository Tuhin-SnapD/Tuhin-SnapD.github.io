---
import Layout from '../../layouts/Layout.astro';
import Modal from '../../components/Modal.astro';

const today = new Date().toISOString().split('T')[0];
---

<Layout title="Add TIL Note - DevNotes">
  <div class="px-4 py-8 sm:px-6 lg:px-8 max-w-4xl mx-auto">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
        âœ¨ Add Your TIL Note
      </h1>
      <p class="text-gray-600 dark:text-gray-300">
        Share something you learned today. No matter how small, every discovery counts!
      </p>
    </div>

    <!-- Add Note Form -->
    <div class="card p-6">
      <form id="til-form" class="space-y-6">
        <!-- Title -->
        <div>
          <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            What did you learn? *
          </label>
          <input 
            type="text" 
            id="title" 
            name="title" 
            required
            placeholder="e.g., How to use CSS Grid with Tailwind"
            class="search-input w-full"
          >
        </div>

        <!-- Description -->
        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Brief description (optional)
          </label>
          <textarea 
            id="description" 
            name="description" 
            rows="3"
            placeholder="A short description of what you learned..."
            class="search-input w-full resize-none"
          ></textarea>
        </div>

        <!-- Date -->
        <div>
          <label for="date" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Date *
          </label>
          <input 
            type="date" 
            id="date" 
            name="date" 
            required
            value={today}
            class="search-input w-full"
          >
        </div>

        <!-- Category -->
        <div>
          <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Category *
          </label>
          <select 
            id="category" 
            name="category" 
            required
            class="search-input w-full"
          >
            <option value="">Select a category</option>
            <option value="frontend">Frontend</option>
            <option value="backend">Backend</option>
            <option value="devops">DevOps</option>
            <option value="database">Database</option>
            <option value="tools">Tools</option>
            <option value="algorithms">Algorithms</option>
            <option value="design">Design</option>
            <option value="ai">AI</option>
            <option value="other">Other</option>
          </select>
        </div>

        <!-- Tags -->
        <div>
          <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Tags (comma-separated)
          </label>
          <input 
            type="text" 
            id="tags" 
            name="tags" 
            placeholder="e.g., javascript, css, tailwind"
            class="search-input w-full"
          >
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
            Separate multiple tags with commas
          </p>
        </div>

        <!-- Content -->
        <div>
          <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            What you learned *
          </label>
          <textarea 
            id="content" 
            name="content" 
            rows="8"
            required
            placeholder="Share the details of what you learned today. You can include code examples, explanations, or any insights..."
            class="search-input w-full resize-none"
          ></textarea>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
            Use markdown for formatting (## for headings, ``` for code blocks, etc.)
          </p>
        </div>

        <!-- Submit Button -->
        <div class="flex gap-4 pt-4">
          <button 
            type="submit" 
            id="submit-btn"
            class="btn-primary flex-1 flex items-center justify-center gap-2"
          >
            <span id="submit-text">ðŸ’¾ Save TIL Note</span>
            <svg id="loading-spinner" class="hidden w-5 h-5 animate-spin" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </button>
          <a 
            href="/til" 
            class="btn-secondary flex-1 text-center"
          >
            Cancel
          </a>
        </div>
      </form>
    </div>

    <!-- Tips Section -->
    <div class="mt-8 card p-6">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
        ðŸ’¡ Tips for Great TIL Notes
      </h3>
      <ul class="space-y-2 text-gray-600 dark:text-gray-300">
        <li class="flex items-start">
          <span class="text-primary-600 mr-2">â€¢</span>
          <span>Keep it focused on one specific thing you learned</span>
        </li>
        <li class="flex items-start">
          <span class="text-primary-600 mr-2">â€¢</span>
          <span>Include code examples when relevant</span>
        </li>
        <li class="flex items-start">
          <span class="text-primary-600 mr-2">â€¢</span>
          <span>Add context about why this learning was important</span>
        </li>
        <li class="flex items-start">
          <span class="text-primary-600 mr-2">â€¢</span>
          <span>Use tags to make your notes searchable</span>
        </li>
        <li class="flex items-start">
          <span class="text-primary-600 mr-2">â€¢</span>
          <span>Even small learnings are valuable - don't overthink it!</span>
        </li>
      </ul>
    </div>
  </div>

  <script>
    const form = document.getElementById('til-form') as HTMLFormElement;
    
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
      const submitText = document.getElementById('submit-text');
      const loadingSpinner = document.getElementById('loading-spinner');
      
      // Show loading state
      submitBtn.disabled = true;
      submitText.textContent = 'Creating...';
      loadingSpinner?.classList.remove('hidden');
      
      // Convert form data to JSON
      const formData = new FormData(form);
      const jsonData = {};
      for (const [key, value] of formData.entries()) {
        jsonData[key] = value;
      }
      
      try {
        console.log('Submitting TIL form data...');
        const response = await fetch('/api/add-til', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(jsonData)
        });
        
        console.log('Response status:', response.status);
        const result = await response.json();
        console.log('Response result:', result);
        
        if (result.success) {
          window.Modal.show('notification-modal', 'TIL note created successfully! The page will reload to show your new note.', 'Success', 'success');
          window.location.href = '/til';
        } else {
          window.Modal.show('notification-modal', `Error: ${result.message}`, 'Error', 'error');
          console.error('API Error:', result);
          // Reset button state
          submitBtn.disabled = false;
          submitText.textContent = 'ðŸ’¾ Save TIL Note';
          loadingSpinner?.classList.add('hidden');
        }
      } catch (error) {
        window.Modal.show('notification-modal', 'Error creating TIL note. Please try again.', 'Error', 'error');
        console.error('Error:', error);
        // Reset button state
        submitBtn.disabled = false;
        submitText.textContent = 'ðŸ’¾ Save TIL Note';
        loadingSpinner?.classList.add('hidden');
      }
    });

    // Auto-resize textareas
    const textareas = document.querySelectorAll('textarea');
    textareas.forEach(textarea => {
      textarea.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = this.scrollHeight + 'px';
      });
    });
  </script>

  <!-- Modal for notifications -->
  <Modal id="notification-modal" title="Notification" type="info" />
</Layout> 